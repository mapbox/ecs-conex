{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "create docker images",
    "Parameters": {
        "GithubAccessToken": {
            "Description": "A Github access token with permission to clone private repositories",
            "Type": "String"
        },
        "WatchbotCluster": {
            "Description": "The ARN of the ECS cluster to run on",
            "Type": "String"
        },
        "WatchbotClusterRole": {
            "Description": "An IAM role that can be assumed by EC2s in the ECS cluster",
            "Type": "String"
        },
        "WatchbotQueueSizeAlarm": {
            "Description": "Queue depth that triggers alarm",
            "Type": "Number",
            "Default": 20
        },
        "WatchbotQueueSizeAlarmPeriod": {
            "Description": "Number of 5-min periods of elevated queue depth that will trigger an alarm",
            "Type": "Number",
            "Default": 6
        },
        "WatchbotMessageTimeout": {
            "Description": "Approx. number of seconds per job",
            "Type": "Number",
            "Default": 1200
        },
        "WatchbotGitSha": {
            "Description": "The SHA of Watchbot to use",
            "Type": "String",
            "Default": "56ce650b68d11472d653c9fec39e4b7bd6d221d2"
        },
        "WatchbotWatchers": {
            "Description": "The number of queue watchers to run",
            "Type": "Number",
            "Default": 1
        },
        "WatchbotTasks": {
            "Description": "Max number of concurrent tasks to run per watcher",
            "Type": "Number",
            "Default": 4
        },
        "WatchbotNotificationEmail": {
            "Description": "An email address to subscribe to notifications",
            "Type": "String",
            "Default": "devnull@mapbox.com"
        },
        "GitSha": {
            "Description": "The SHA of the task repository to use",
            "Type": "String"
        },
        "TaskMemory": {
            "Description": "The number of MB of memory to reserve for each task",
            "Type": "Number",
            "Default": 512
        }
    },
    "Resources": {
        "WatchbotWatchbotQueueSizeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Description": "An alarm that is tripped when too many messages are in Watchbot's queue",
            "Properties": {
                "AlarmDescription": {
                    "Fn::Join": [
                        " ",
                        [
                            "Alarm if more than",
                            {
                                "Ref": "WatchbotQueueSizeAlarm"
                            },
                            "messages in the queue for ",
                            {
                                "Ref": "WatchbotQueueSizeAlarmPeriod"
                            },
                            "consecutive 5 minute periods"
                        ]
                    ]
                },
                "MetricName": "ApproximateNumberOfMessagesVisible",
                "Namespace": "AWS/SQS",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": {
                    "Ref": "WatchbotQueueSizeAlarmPeriod"
                },
                "Threshold": {
                    "Ref": "WatchbotQueueSizeAlarm"
                },
                "AlarmActions": [
                    {
                        "Ref": "WatchbotNotificationTopic"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "QueueName",
                        "Value": {
                            "Fn::GetAtt": [
                                "WatchbotQueue",
                                "QueueName"
                            ]
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "WatchbotQueue": {
            "Type": "AWS::SQS::Queue",
            "Description": "Watchbot's backlog of messages to process",
            "Properties": {
                "VisibilityTimeout": {
                    "Ref": "WatchbotMessageTimeout"
                },
                "QueueName": {
                    "Ref": "AWS::StackName"
                },
                "MessageRetentionPeriod": 1209600
            }
        },
        "WatchbotWorkTopic": {
            "Type": "AWS::SNS::Topic",
            "Description": "Send messages to this topic to trigger tasks",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "WatchbotQueue",
                                "Arn"
                            ]
                        },
                        "Protocol": "sqs"
                    }
                ]
            }
        },
        "WatchbotQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Description": "A policy allowing the work topic to enqueue messages",
            "Properties": {
                "Queues": [
                    {
                        "Ref": "WatchbotQueue"
                    }
                ],
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "WatchbotQueue",
                    "Statement": [
                        {
                            "Sid": "SendSomeMessages",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": [
                                "sqs:SendMessage"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "WatchbotQueue",
                                    "Arn"
                                ]
                            },
                            "Condition": {
                                "ArnEquals": {
                                    "aws:SourceArn": {
                                        "Ref": "WatchbotWorkTopic"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        "WatchbotNotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Description": "Subscribe to this topic to receive emails when tasks fail or retry",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "WatchbotNotificationEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "WatchbotWatcherPolicy": {
            "Type": "AWS::IAM::Policy",
            "Description": "The IAM policy used by Watchbot's watcher container(s)",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "WatchbotClusterRole"
                    }
                ],
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "watchbot-watcher-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage",
                                "sqs:ChangeMessageVisibility"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "WatchbotQueue",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sns:Publish"
                            ],
                            "Resource": {
                                "Ref": "WatchbotNotificationTopic"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecs:RunTask"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:ecs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":task-definition/",
                                        {
                                            "Ref": "AWS::StackName"
                                        },
                                        "*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringEquals": {
                                    "ecs:cluster": {
                                        "Ref": "WatchbotCluster"
                                    }
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecs:DescribeTasks",
                                "ecs:DescribeContainerInstances"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "ecs:cluster": {
                                        "Ref": "WatchbotCluster"
                                    }
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecs:ListContainerInstances"
                            ],
                            "Resource": {
                                "Ref": "WatchbotCluster"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecs:DescribeTaskDefinition"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "WatchbotWatcher": {
            "Type": "AWS::ECS::TaskDefinition",
            "Description": "The task definition responsible for watching the queue and running tasks",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-watchbot"
                                ]
                            ]
                        },
                        "Image": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ".dkr.ecr.",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".amazonaws.com/ecs-watchbot:",
                                    {
                                        "Ref": "WatchbotGitSha"
                                    }
                                ]
                            ]
                        },
                        "Memory": 128,
                        "Environment": [
                            {
                                "Name": "Cluster",
                                "Value": {
                                    "Ref": "WatchbotCluster"
                                }
                            },
                            {
                                "Name": "TaskDefinition",
                                "Value": {
                                    "Ref": "WatchbotTask"
                                }
                            },
                            {
                                "Name": "ContainerName",
                                "Value": "ecs-conext"
                            },
                            {
                                "Name": "Concurrency",
                                "Value": {
                                    "Ref": "WatchbotTasks"
                                }
                            },
                            {
                                "Name": "QueueUrl",
                                "Value": {
                                    "Ref": "WatchbotQueue"
                                }
                            },
                            {
                                "Name": "NotificationTopic",
                                "Value": {
                                    "Ref": "WatchbotNotificationTopic"
                                }
                            },
                            {
                                "Name": "StackName",
                                "Value": {
                                    "Ref": "AWS::StackName"
                                }
                            },
                            {
                                "Name": "ExponentialBackoff",
                                "Value": "true"
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "syslog",
                            "Options": {
                                "syslog-address": "udp://localhost:514"
                            }
                        }
                    }
                ]
            }
        },
        "WatchbotService": {
            "Type": "AWS::ECS::Service",
            "Description": "Maintains the desired number of watcher containers",
            "DependsOn": [
                "WatchbotTask",
                "WatchbotTaskPolicy",
                "WatchbotWatcherPolicy"
            ],
            "Properties": {
                "Cluster": {
                    "Ref": "WatchbotCluster"
                },
                "DesiredCount": {
                    "Ref": "WatchbotWatchers"
                },
                "TaskDefinition": {
                    "Ref": "WatchbotWatcher"
                }
            }
        },
        "WatchbotTaskPolicy": {
            "Type": "AWS::IAM::Policy",
            "Description": "The IAM policy required by your task",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "WatchbotClusterRole"
                    }
                ],
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "watchbot-task-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:CreateRepository",
                                "ecr:DescribeRepositories",
                                "ecr:GetAuthorizationToken",
                                "ecr:InitiateLayerUpload",
                                "ecr:CompleteLayerUpload",
                                "ecr:UploadLayerPart",
                                "ecr:PutImage"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        },
        "WatchbotTask": {
            "Type": "AWS::ECS::TaskDefinition",
            "Description": "The task definition responsible for processing messages",
            "DependsOn": "WatchbotTaskPolicy",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Name": "ecs-conex",
                        "Image": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ".dkr.ecr.",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".amazonaws.com/ecs-conex:",
                                    {
                                        "Ref": "GitSha"
                                    }
                                ]
                            ]
                        },
                        "Memory": {
                            "Ref": "TaskMemory"
                        },
                        "Environment": [
                            {
                                "Name": "StackRegion",
                                "Value": {
                                    "Ref": "AWS::Region"
                                }
                            },
                            {
                                "Name": "AccountId",
                                "Value": {
                                    "Ref": "AWS::AccountId"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "syslog",
                            "Options": {
                                "syslog-address": "udp://localhost:514"
                            }
                        },
                        "MountPoints": [
                            {
                                "ContainerPath": "/mnt/data",
                                "SourceVolume": "data"
                            },
                            {
                                "ContainerPath": "/var/run/docker.sock",
                                "SourceVolume": "docker"
                            }
                        ]
                    }
                ],
                "Volumes": [
                    {
                        "Name": "data",
                        "Host": {
                            "SourcePath": "/mnt/data"
                        }
                    },
                    {
                        "Name": "docker",
                        "Host": {
                            "SourcePath": "/var/run/docker.sock"
                        }
                    }
                ]
            }
        },
        "WatchbotUser": {
            "Type": "AWS::IAM::User",
            "Description": "An AWS user with permission to publish the the work topic",
            "Properties": {
                "Path": "/service/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "publish-to-sns"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "WatchbotWorkTopic"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WatchbotUserKey": {
            "Type": "AWS::IAM::AccessKey",
            "Description": "AWS access keys to authenticate as the Watchbot user",
            "Properties": {
                "Status": "Active",
                "UserName": {
                    "Ref": "WatchbotUser"
                }
            }
        },
        "WatchbotWebhookApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "watchbot-webhook",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "FailOnWarnings": true
            }
        },
        "WatchbotWebhookDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": "WatchbotWebhookMethod",
            "Properties": {
                "RestApiId": {
                    "Ref": "WatchbotWebhookApi"
                },
                "StageName": "watchbot",
                "StageDescription": {
                    "MethodSettings": [
                        {
                            "HttpMethod": "*",
                            "ResourcePath": "/*",
                            "ThrottlingBurstLimit": 20,
                            "ThrottlingRateLimit": 5
                        }
                    ]
                }
            }
        },
        "WatchbotWebhookMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "WatchbotWebhookApi"
                },
                "ResourceId": {
                    "Ref": "WatchbotWebhookResource"
                },
                "ApiKeyRequired": true,
                "AuthorizationType": "None",
                "HttpMethod": "POST",
                "Integration": {
                    "Type": "AWS",
                    "RequestTemplates": {
                        "application/json": "{\"signature\" :\"$input.params('X-Hub-Signature')\",\"body\" :$input.json('$')}"
                    },
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200
                        },
                        {
                            "StatusCode": 403,
                            "SelectionPattern": "^invalid.*"
                        },
                        {
                            "StatusCode": 500,
                            "SelectionPattern": "^error.*"
                        }
                    ],
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "WatchbotWebhookFunction",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseModels": {
                            "application/json": "Empty"
                        }
                    },
                    {
                        "StatusCode": "403",
                        "ResponseModels": {
                            "application/json": "Empty"
                        }
                    },
                    {
                        "StatusCode": "500",
                        "ResponseModels": {
                            "application/json": "Empty"
                        }
                    }
                ]
            }
        },
        "WatchbotWebhookResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "WatchbotWebhookApi",
                        "RootResourceId"
                    ]
                },
                "RestApiId": {
                    "Ref": "WatchbotWebhookApi"
                },
                "PathPart": "webhooks"
            }
        },
        "WatchbotWebhookFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Sid": "webhookrole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "WatchbotWebhookPolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "WatchbotWorkTopic"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WatchbotWebhookFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "var AWS = require(\"aws-sdk\");",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "var sns = new AWS.SNS({ region: \"",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\" });"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "var topic = \"",
                                            {
                                                "Ref": "WatchbotWorkTopic"
                                            },
                                            "\";"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "var secret = \"",
                                            {
                                                "Ref": "WatchbotUserKey"
                                            },
                                            "\";"
                                        ]
                                    ]
                                },
                                "var crypto = require('crypto');",
                                "module.exports.webhooks = function(event, context) {",
                                "  var body = event.body",
                                "  var hash = \"sha1=\" + crypto.createHmac(\"sha1\", secret).update(JSON.stringify(body)).digest(\"hex\");",
                                "  if (event.signature !== hash) return context.done(\"invalid: signature does not match\");",
                                "  if (body.zen) return context.done(null, \"ignored ping request\");",
                                "  var push = {",
                                "    ref: event.body.ref,",
                                "    after: event.body.after,",
                                "    before: event.body.before,",
                                "    repository: {",
                                "      name: event.body.repository.name,",
                                "      owner: { name: event.body.repository.owner.name }",
                                "    },",
                                "    pusher: { name: event.body.pusher.name }",
                                "  };",
                                "  var params = {",
                                "    TopicArn: topic,",
                                "    Subject: \"webhook\",",
                                "    Message: JSON.stringify(push)",
                                "  };",
                                "  sns.publish(params, function(err) {",
                                "    if (err) return context.done(\"error: \" + err.message);",
                                "    context.done(null, \"success\");",
                                "  });",
                                "};"
                            ]
                        ]
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "WatchbotWebhookFunctionRole",
                        "Arn"
                    ]
                },
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "watchbot webhooks for ",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Handler": "index.webhooks",
                "Runtime": "nodejs",
                "Timeout": 30,
                "MemorySize": 128
            }
        },
        "WatchbotWebhookPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "WatchbotWebhookFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "WatchbotWebhookApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        }
    },
    "Outputs": {
        "WatchbotSns": {
            "Description": "The ARN of Watchbot's SNS topic. Send messages to this topic to be processed by Watchbot",
            "Value": {
                "Ref": "WatchbotWorkTopic"
            }
        },
        "WatchbotQueueUrl": {
            "Description": "The URL of Watchbot's SQS queue",
            "Value": {
                "Ref": "WatchbotQueue"
            }
        },
        "WatchbotQueueArn": {
            "Description": "The ARN of Watchbot's SQS queue",
            "Value": {
                "Fn::GetAtt": [
                    "WatchbotQueue",
                    "Arn"
                ]
            }
        },
        "WatchbotQueueName": {
            "Description": "The name of Watchbot's SQS queue",
            "Value": {
                "Fn::GetAtt": [
                    "WatchbotQueue",
                    "QueueName"
                ]
            }
        },
        "WatchbotAlarms": {
            "Description": "The ARN of an SNS topic where Watchbot will send notifications for failed processing",
            "Value": {
                "Ref": "WatchbotNotificationTopic"
            }
        },
        "WatchbotAccessKeyId": {
            "Description": "An access key with permission to publish messages to Watchbot",
            "Value": {
                "Ref": "WatchbotUserKey"
            }
        },
        "WatchbotSecretAccessKey": {
            "Description": "A secret access key with permission to publish messages to Watchbot",
            "Value": {
                "Fn::GetAtt": [
                    "WatchbotUserKey",
                    "SecretAccessKey"
                ]
            }
        },
        "WatchbotWebhookEndpoint": {
            "Description": "The HTTPS endpoint used to send webhooks to Watchbot",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "WatchbotWebhookApi"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/watchbot/webhooks"
                    ]
                ]
            }
        }
    }
}
